#!/usr/bin/env ruby


require 'spider-gazelle'
require 'optparse'


options = {
    host: "0.0.0.0",
    port: 3000,
    tls: false,
    environment: ENV['RACK_ENV'] || 'development',
    rackup: "#{Dir.pwd}/config.ru",
    quiet: false
}

parser = OptionParser.new do |opts|
    opts.on "-p", "--port PORT", Integer, "Define what port TCP port to bind to (default: 3000)" do |arg|
        options[:port] = arg
    end

    opts.on "-a", "--address HOST", "bind to HOST address (default: 0.0.0.0)" do |arg|
        options[:host] = arg
    end

    opts.on "-q", "--quiet", "quiet down the output" do
        options[:quiet] = true
    end

    opts.on "-e", "--environment ENVIRONMENT", "The environment to run the Rack app on (default: development)" do |arg|
        options[:environment] = arg
    end

    opts.on "-r", "--rackup FILE", "Load Rack config from this file (default: config.ru)" do |arg|
        options[:rackup] = arg
    end

    opts.on "-l", "--logfile FILE", "Location of the servers log file (default: logs/server.log)" do |arg|
        options[:rackup] = arg
    end
end

parser.banner = "sg <options> <rackup file>"
parser.on_tail "-h", "--help", "Show help" do
    puts parser
    exit 1
end

parser.parse!(ARGV)

if ARGV.last =~ /\.ru$/
    options[:rackup] = ARGV.shift
end

unless File.exists?(options[:rackup])
    abort "No rackup found at #{options[:rackup]}"
end

ENV['RACK_ENV'] = options[:environment].to_s

::Libuv::Loop.default.run do |logger|
    logger.progress do |level, errorid, error|
        begin
            puts "Log called: #{level}: #{errorid}\n#{error.message}\n#{error.backtrace.join("\n")}\n"
        rescue Exception
            p 'error in gazelle logger'
        end
    end

    puts "Look out! Here comes Spider-Gazelle #{::SpiderGazelle::VERSION}!"
    puts "* Environment: #{ENV['RACK_ENV']} on #{RUBY_ENGINE || 'ruby'} #{RUBY_VERSION}"
    server = ::SpiderGazelle::Spider.instance
    server.loaded.then do
        puts "* Loading: #{options[:rackup]}"
        server.load(options[:rackup], options).catch(proc {|e|
            puts "#{e.message}\n#{e.backtrace.join("\n") unless e.backtrace.nil?}\n"
        }).finally do
            # This will execute if the TCP binding is lost
            server.shutdown
        end

        puts "* Listening on tcp://#{options[:host]}:#{options[:port]}"
    end
end

puts "\nSpider-Gazelle leaps through the veldt"
